# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/types/insert_f_positional.edgeql`.
defmodule Tests.Codegen.Queries.Types.InsertFPositional do
  @query """
  with l_e := (insert codegen::E{ rp_a_str := <str>$0, rp_e_str := <str>$4 })
  insert codegen::F {
      rp_a_str := <str>$0,
      rp_b_str := <str>$1,
      rp_c_str := <str>$2,
      rp_d_str := <str>$3,
      rp_f_str := <str>$5,

      ol_a_b := l_e,
      ml_a_b := {l_e},
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/types/insert_f_positional.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/types/insert_f_positional.edgeql"

  @type result() :: %{}

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          arg_0 :: String.t(),
          arg_1 :: String.t(),
          arg_2 :: String.t(),
          arg_3 :: String.t(),
          arg_4 :: String.t(),
          arg_5 :: String.t(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, opts \\ []) do
    args = [arg_0, arg_1, arg_2, arg_3, arg_4, arg_5]
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          arg_0 :: String.t(),
          arg_1 :: String.t(),
          arg_2 :: String.t(),
          arg_3 :: String.t(),
          arg_4 :: String.t(),
          arg_5 :: String.t(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, opts \\ []) do
    args = [arg_0, arg_1, arg_2, arg_3, arg_4, arg_5]

    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)
    EdgeDB.query_required_single(client, @query, args, opts)
  end
end
