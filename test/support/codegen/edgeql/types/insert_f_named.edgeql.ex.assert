# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/types/insert_f_named.edgeql`.
defmodule Tests.Codegen.Queries.Types.InsertFNamed do
  @query """
  with l_e := (insert codegen::E{ rp_a_str := <str>$rp_a_str, rp_e_str := <str>$rp_e_str })
  insert codegen::F {
      rp_a_str := <str>$rp_a_str,
      rp_b_str := <str>$rp_b_str,
      rp_c_str := <str>$rp_c_str,
      rp_d_str := <str>$rp_d_str,
      rp_f_str := <str>$rp_f_str,

      ol_a_b := l_e,
      ml_a_b := {l_e},
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/types/insert_f_named.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @type result() :: %{}

  @type keyword_args() :: [
          {:rp_a_str, String.t()}
          | {:rp_e_str, String.t()}
          | {:rp_b_str, String.t()}
          | {:rp_c_str, String.t()}
          | {:rp_d_str, String.t()}
          | {:rp_f_str, String.t()}
        ]

  @type map_args() :: %{
          rp_a_str: String.t(),
          rp_e_str: String.t(),
          rp_b_str: String.t(),
          rp_c_str: String.t(),
          rp_d_str: String.t(),
          rp_f_str: String.t()
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    EdgeDB.query_required_single(client, @query, args, opts)
  end
end
