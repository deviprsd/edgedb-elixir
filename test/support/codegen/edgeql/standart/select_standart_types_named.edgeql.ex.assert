# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/standart/select_standart_types_named.edgeql`.
defmodule Tests.Codegen.Queries.Standart.SelectStandartTypesNamed do
  @query """
  select {
      # string
      cp_str := <str>$cp_str,
      cp_str_type := <codegen::StrType>$cp_str_type,

      cp_bool := <bool>$cp_bool,
      cp_bool_type := <codegen::BoolType>$cp_bool_type,

      cp_int16 := <int16>$cp_int16,
      cp_int16_type := <codegen::Int16Type>$cp_int16_type,

      cp_int32 := <int32>$cp_int32,
      cp_int32_type := <codegen::Int32Type>$cp_int32_type,

      cp_int64 := <int64>$cp_int64,
      cp_int64_type := <codegen::Int64Type>$cp_int64_type,

      cp_float32 := <float32>$cp_float32,
      cp_float32_type := <codegen::Float32Type>$cp_float32_type,

      cp_float64 := <float64>$cp_float64,
      cp_float64_type := <codegen::Float64Type>$cp_float64_type,

      cp_decimal := <decimal>$cp_decimal,
      cp_decimal_type := <codegen::DecimalType>$cp_decimal_type,

      # json

      cp_json := <json>$cp_json,
      cp_json_type := <codegen::JsonType>$cp_json_type,

      # uuid

      cp_uuid := <uuid>$cp_uuid,
      cp_uuid_type := <codegen::UuidType>$cp_uuid_type,

      # enum

      cp_enum := <codegen::EnumType>$cp_enum,

      # date/time

      cp_datetime := <datetime>$cp_datetime,
      cp_datetime_type := <codegen::DatetimeType>$cp_datetime_type,

      cp_duration := <duration>$cp_duration,
      cp_duration_type := <codegen::DurationType>$cp_duration_type,

      cp_cal_local_datetime := <cal::local_datetime>$cp_cal_local_datetime,
      cp_cal_local_datetime_type := <codegen::CalLocalDatetimeType>$cp_cal_local_datetime_type,

      cp_cal_local_date := <cal::local_date>$cp_cal_local_date,
      cp_cal_local_date_type := <codegen::CalLocalDateType>$cp_cal_local_date_type,

      cp_cal_local_time := <cal::local_time>$cp_cal_local_time,
      cp_cal_local_time_type := <codegen::CalLocalTimeType>$cp_cal_local_time_type,

      cp_cal_relative_duration := <cal::relative_duration>$cp_cal_relative_duration,
      cp_cal_relative_duration_type := <codegen::CalRelativeDurationType>$cp_cal_relative_duration_type,

      cp_cal_date_duration := <cal::date_duration>$cp_cal_date_duration,
      cp_cal_date_duration_type := <codegen::CalDateDurationType>$cp_cal_date_duration_type,

      # array

      cp_array_int64 := <array<int64>>$cp_array_int64,

      # range

      cp_range_int32 := <range<int32>>$cp_range_int32,

      cp_range_int64 := <range<int64>>$cp_range_int64,

      cp_range_float32 := <range<float32>>$cp_range_float32,

      cp_range_float64 := <range<float64>>$cp_range_float64,

      cp_range_decimal := <range<decimal>>$cp_range_decimal,

      cp_range_datetime := <range<datetime>>$cp_range_datetime,

      cp_range_cal_local_datetime := <range<cal::local_datetime>>$cp_range_cal_local_datetime,

      cp_range_cal_local_date := <range<cal::local_date>>$cp_range_cal_local_date,

      # bytes

      cp_bytes := <bytes>$cp_bytes,
      cp_bytes_type := <codegen::BytesType>$cp_bytes_type,

      # config

      cp_cfg_memory := <cfg::memory>$cp_cfg_memory,
      cp_cfg_memory_type := <codegen::CfgMemoryType>$cp_cfg_memory_type,
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/standart/select_standart_types_named.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/standart/select_standart_types_named.edgeql"

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  @typedoc """
  ```edgeql
  std::json
  ```
  """
  @type json() :: any()

  @typedoc """
  ```edgeql
  std::duration
  ```
  """
  @type duration() :: Timex.Duration.t() | integer()

  @typedoc """
  ```edgeql
  scalar type codegen::UuidType extending std::uuid
  ```
  """
  @type codegen__uuid_type() :: binary()

  @typedoc """
  ```edgeql
  scalar type codegen::StrType extending std::str
  ```
  """
  @type codegen__str_type() :: String.t()

  @typedoc """
  ```edgeql
  scalar type codegen::JsonType extending std::json
  ```
  """
  @type codegen__json_type() :: any()

  @typedoc """
  ```edgeql
  scalar type codegen::Int64Type extending std::int64
  ```
  """
  @type codegen__int64_type() :: integer()

  @typedoc """
  ```edgeql
  scalar type codegen::Int32Type extending std::int32
  ```
  """
  @type codegen__int32_type() :: integer()

  @typedoc """
  ```edgeql
  scalar type codegen::Int16Type extending std::int16
  ```
  """
  @type codegen__int16_type() :: integer()

  @typedoc """
  ```edgeql
  scalar type codegen::Float64Type extending std::float64
  ```
  """
  @type codegen__float64_type() :: float()

  @typedoc """
  ```edgeql
  scalar type codegen::Float32Type extending std::float32
  ```
  """
  @type codegen__float32_type() :: float()

  @typedoc """
  ```edgeql
  scalar type codegen::EnumType extending enum<A, B, C>
  ```
  """
  @type codegen__enum_type() :: String.t() | :A | :B | :C

  @typedoc """
  ```edgeql
  scalar type codegen::DurationType extending std::duration
  ```
  """
  @type codegen__duration_type() :: integer()

  @typedoc """
  ```edgeql
  scalar type codegen::DecimalType extending std::decimal
  ```
  """
  @type codegen__decimal_type() :: Decimal.t()

  @typedoc """
  ```edgeql
  scalar type codegen::DatetimeType extending std::datetime
  ```
  """
  @type codegen__datetime_type() :: DateTime.t()

  @typedoc """
  ```edgeql
  scalar type codegen::CfgMemoryType extending cfg::memory
  ```
  """
  @type codegen__cfg_memory_type() :: EdgeDB.ConfigMemory.t()

  @typedoc """
  ```edgeql
  scalar type codegen::CalRelativeDurationType extending cal::relative_duration
  ```
  """
  @type codegen__cal_relative_duration_type() :: EdgeDB.RelativeDuration.t()

  @typedoc """
  ```edgeql
  scalar type codegen::CalLocalTimeType extending cal::local_time
  ```
  """
  @type codegen__cal_local_time_type() :: Time.t()

  @typedoc """
  ```edgeql
  scalar type codegen::CalLocalDatetimeType extending cal::local_datetime
  ```
  """
  @type codegen__cal_local_datetime_type() :: NaiveDateTime.t()

  @typedoc """
  ```edgeql
  scalar type codegen::CalLocalDateType extending cal::local_date
  ```
  """
  @type codegen__cal_local_date_type() :: Date.t()

  @typedoc """
  ```edgeql
  scalar type codegen::CalDateDurationType extending cal::date_duration
  ```
  """
  @type codegen__cal_date_duration_type() :: EdgeDB.DateDuration.t()

  @typedoc """
  ```edgeql
  scalar type codegen::BytesType extending std::bytes
  ```
  """
  @type codegen__bytes_type() :: bitstring()

  @typedoc """
  ```edgeql
  scalar type codegen::BoolType extending std::bool
  ```
  """
  @type codegen__bool_type() :: boolean()

  @type result() :: %{
          cp_str: String.t(),
          cp_str_type: codegen__str_type(),
          cp_bool: boolean(),
          cp_bool_type: codegen__bool_type(),
          cp_int16: integer(),
          cp_int16_type: codegen__int16_type(),
          cp_int32: integer(),
          cp_int32_type: codegen__int32_type(),
          cp_int64: integer(),
          cp_int64_type: codegen__int64_type(),
          cp_float32: float(),
          cp_float32_type: codegen__float32_type(),
          cp_float64: float(),
          cp_float64_type: codegen__float64_type(),
          cp_decimal: Decimal.t(),
          cp_decimal_type: codegen__decimal_type(),
          cp_json: json(),
          cp_json_type: codegen__json_type(),
          cp_uuid: uuid(),
          cp_uuid_type: codegen__uuid_type(),
          cp_enum: codegen__enum_type(),
          cp_datetime: DateTime.t(),
          cp_datetime_type: codegen__datetime_type(),
          cp_duration: duration(),
          cp_duration_type: codegen__duration_type(),
          cp_cal_local_datetime: NaiveDateTime.t(),
          cp_cal_local_datetime_type: codegen__cal_local_datetime_type(),
          cp_cal_local_date: Date.t(),
          cp_cal_local_date_type: codegen__cal_local_date_type(),
          cp_cal_local_time: Time.t(),
          cp_cal_local_time_type: codegen__cal_local_time_type(),
          cp_cal_relative_duration: EdgeDB.RelativeDuration.t(),
          cp_cal_relative_duration_type: codegen__cal_relative_duration_type(),
          cp_cal_date_duration: EdgeDB.DateDuration.t(),
          cp_cal_date_duration_type: codegen__cal_date_duration_type(),
          cp_array_int64: [integer()],
          cp_range_int32: EdgeDB.Range.t(integer()),
          cp_range_int64: EdgeDB.Range.t(integer()),
          cp_range_float32: EdgeDB.Range.t(float()),
          cp_range_float64: EdgeDB.Range.t(float()),
          cp_range_decimal: EdgeDB.Range.t(Decimal.t()),
          cp_range_datetime: EdgeDB.Range.t(DateTime.t()),
          cp_range_cal_local_datetime: EdgeDB.Range.t(NaiveDateTime.t()),
          cp_range_cal_local_date: EdgeDB.Range.t(Date.t()),
          cp_bytes: bitstring(),
          cp_bytes_type: codegen__bytes_type(),
          cp_cfg_memory: EdgeDB.ConfigMemory.t(),
          cp_cfg_memory_type: codegen__cfg_memory_type()
        }

  @type keyword_args() :: [
          {:cp_str, String.t()}
          | {:cp_str_type, codegen__str_type()}
          | {:cp_bool, boolean()}
          | {:cp_bool_type, codegen__bool_type()}
          | {:cp_int16, integer()}
          | {:cp_int16_type, codegen__int16_type()}
          | {:cp_int32, integer()}
          | {:cp_int32_type, codegen__int32_type()}
          | {:cp_int64, integer()}
          | {:cp_int64_type, codegen__int64_type()}
          | {:cp_float32, float()}
          | {:cp_float32_type, codegen__float32_type()}
          | {:cp_float64, float()}
          | {:cp_float64_type, codegen__float64_type()}
          | {:cp_decimal, Decimal.t()}
          | {:cp_decimal_type, codegen__decimal_type()}
          | {:cp_json, json()}
          | {:cp_json_type, codegen__json_type()}
          | {:cp_uuid, uuid()}
          | {:cp_uuid_type, codegen__uuid_type()}
          | {:cp_enum, codegen__enum_type()}
          | {:cp_datetime, DateTime.t()}
          | {:cp_datetime_type, codegen__datetime_type()}
          | {:cp_duration, duration()}
          | {:cp_duration_type, codegen__duration_type()}
          | {:cp_cal_local_datetime, NaiveDateTime.t()}
          | {:cp_cal_local_datetime_type, codegen__cal_local_datetime_type()}
          | {:cp_cal_local_date, Date.t()}
          | {:cp_cal_local_date_type, codegen__cal_local_date_type()}
          | {:cp_cal_local_time, Time.t()}
          | {:cp_cal_local_time_type, codegen__cal_local_time_type()}
          | {:cp_cal_relative_duration, EdgeDB.RelativeDuration.t()}
          | {:cp_cal_relative_duration_type, codegen__cal_relative_duration_type()}
          | {:cp_cal_date_duration, EdgeDB.DateDuration.t()}
          | {:cp_cal_date_duration_type, codegen__cal_date_duration_type()}
          | {:cp_array_int64, [integer()]}
          | {:cp_range_int32, EdgeDB.Range.t(integer())}
          | {:cp_range_int64, EdgeDB.Range.t(integer())}
          | {:cp_range_float32, EdgeDB.Range.t(float())}
          | {:cp_range_float64, EdgeDB.Range.t(float())}
          | {:cp_range_decimal, EdgeDB.Range.t(Decimal.t())}
          | {:cp_range_datetime, EdgeDB.Range.t(DateTime.t())}
          | {:cp_range_cal_local_datetime, EdgeDB.Range.t(NaiveDateTime.t())}
          | {:cp_range_cal_local_date, EdgeDB.Range.t(Date.t())}
          | {:cp_bytes, bitstring()}
          | {:cp_bytes_type, codegen__bytes_type()}
          | {:cp_cfg_memory, EdgeDB.ConfigMemory.t()}
          | {:cp_cfg_memory_type, codegen__cfg_memory_type()}
        ]

  @type map_args() :: %{
          cp_str: String.t(),
          cp_str_type: codegen__str_type(),
          cp_bool: boolean(),
          cp_bool_type: codegen__bool_type(),
          cp_int16: integer(),
          cp_int16_type: codegen__int16_type(),
          cp_int32: integer(),
          cp_int32_type: codegen__int32_type(),
          cp_int64: integer(),
          cp_int64_type: codegen__int64_type(),
          cp_float32: float(),
          cp_float32_type: codegen__float32_type(),
          cp_float64: float(),
          cp_float64_type: codegen__float64_type(),
          cp_decimal: Decimal.t(),
          cp_decimal_type: codegen__decimal_type(),
          cp_json: json(),
          cp_json_type: codegen__json_type(),
          cp_uuid: uuid(),
          cp_uuid_type: codegen__uuid_type(),
          cp_enum: codegen__enum_type(),
          cp_datetime: DateTime.t(),
          cp_datetime_type: codegen__datetime_type(),
          cp_duration: duration(),
          cp_duration_type: codegen__duration_type(),
          cp_cal_local_datetime: NaiveDateTime.t(),
          cp_cal_local_datetime_type: codegen__cal_local_datetime_type(),
          cp_cal_local_date: Date.t(),
          cp_cal_local_date_type: codegen__cal_local_date_type(),
          cp_cal_local_time: Time.t(),
          cp_cal_local_time_type: codegen__cal_local_time_type(),
          cp_cal_relative_duration: EdgeDB.RelativeDuration.t(),
          cp_cal_relative_duration_type: codegen__cal_relative_duration_type(),
          cp_cal_date_duration: EdgeDB.DateDuration.t(),
          cp_cal_date_duration_type: codegen__cal_date_duration_type(),
          cp_array_int64: [integer()],
          cp_range_int32: EdgeDB.Range.t(integer()),
          cp_range_int64: EdgeDB.Range.t(integer()),
          cp_range_float32: EdgeDB.Range.t(float()),
          cp_range_float64: EdgeDB.Range.t(float()),
          cp_range_decimal: EdgeDB.Range.t(Decimal.t()),
          cp_range_datetime: EdgeDB.Range.t(DateTime.t()),
          cp_range_cal_local_datetime: EdgeDB.Range.t(NaiveDateTime.t()),
          cp_range_cal_local_date: EdgeDB.Range.t(Date.t()),
          cp_bytes: bitstring(),
          cp_bytes_type: codegen__bytes_type(),
          cp_cfg_memory: EdgeDB.ConfigMemory.t(),
          cp_cfg_memory_type: codegen__cfg_memory_type()
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  @schema [
    :cp_uuid_type,
    :cp_uuid,
    :cp_str_type,
    :cp_str,
    :cp_range_int64,
    :cp_range_int32,
    :cp_range_float64,
    :cp_range_float32,
    :cp_range_decimal,
    :cp_range_datetime,
    :cp_range_cal_local_datetime,
    :cp_range_cal_local_date,
    :cp_json_type,
    :cp_json,
    :cp_int64_type,
    :cp_int64,
    :cp_int32_type,
    :cp_int32,
    :cp_int16_type,
    :cp_int16,
    :cp_float64_type,
    :cp_float64,
    :cp_float32_type,
    :cp_float32,
    :cp_enum,
    :cp_duration_type,
    :cp_duration,
    :cp_decimal_type,
    :cp_decimal,
    :cp_datetime_type,
    :cp_datetime,
    :cp_cfg_memory_type,
    :cp_cfg_memory,
    :cp_cal_relative_duration_type,
    :cp_cal_relative_duration,
    :cp_cal_local_time_type,
    :cp_cal_local_time,
    :cp_cal_local_datetime_type,
    :cp_cal_local_datetime,
    :cp_cal_local_date_type,
    :cp_cal_local_date,
    :cp_cal_date_duration_type,
    :cp_cal_date_duration,
    :cp_bytes_type,
    :cp_bytes,
    :cp_bool_type,
    :cp_bool,
    :cp_array_int64
  ]
  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file, __transform_result__: [schema: @schema])
    EdgeDB.query_required_single(client, @query, args, opts)
  end
end
