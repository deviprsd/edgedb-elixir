# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/standart/select_startart_types_named_simple.edgeql`.
defmodule Tests.Codegen.Queries.Standart.SelectStartartTypesNamedSimple do
  @query """
  select {
      a := 1,
      b := {
          b_a := 2,
          b_b := 3
      },
      c := "hello world",
      d := {4, 5, 6},
      e := <str>$e,
      f := <int32>$f,
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/standart/select_startart_types_named_simple.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @type result() :: %{
          a: integer(),
          b: %{b_a: integer(), b_b: integer()},
          c: String.t(),
          d: [integer()],
          e: String.t(),
          f: integer()
        }

  @type keyword_args() :: [{:e, String.t()} | {:f, integer()}]

  @type map_args() :: %{
          e: String.t(),
          f: integer()
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  @schema [:f, :e, :d, :c, :a, b: [:b_b, :b_a]]
  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __transform_result__: [schema: @schema])
    EdgeDB.query_required_single(client, @query, args, opts)
  end
end
