# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `priv/edgedb/edgeql/media_library/list_active_profiles.edgeql`.
defmodule Tests.Codegen.Queries.MediaLibrary.ListActiveProfiles do
  @query """
  with songs := (
    select Song
    filter .status = SongStatus.playing
    order by .updated_at desc
  )
  select songs.user {
    id,
    username,
    profile_tagline,
    avatar_url,
    external_homepage_url,
    ss := (select Song {*}
    filter .status = SongStatus.playing
    order by .updated_at desc)
  }
  limit <int64>$limit
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `priv/edgedb/edgeql/media_library/list_active_profiles.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  @typedoc """
  ```edgeql
  std::duration
  ```
  """
  @type duration() :: Timex.Duration.t() | integer()

  @typedoc """
  ```edgeql
  scalar type default::SongStatus extending enum<stopped, playing, paused>
  ```
  """
  @type default__song_status() :: String.t() | :stopped | :playing | :paused

  @typedoc """
  ```edgeql
  scalar type default::inet extending std::bytes
  ```
  """
  @type default__inet() :: bitstring()

  defmodule Result do
    defmodule Ss do
      defstruct [
        :artist,
        :title,
        :attribution,
        :date_recorded,
        :date_released,
        :paused_at,
        :played_at,
        :server_ip,
        :position,
        :id,
        :inserted_at,
        :updated_at,
        :status,
        :duration
      ]

      @type t() :: %__MODULE__{
              artist: String.t(),
              title: String.t(),
              attribution: String.t() | nil,
              date_recorded: NaiveDateTime.t() | nil,
              date_released: NaiveDateTime.t() | nil,
              paused_at: DateTime.t() | nil,
              played_at: DateTime.t() | nil,
              server_ip: default__inet() | nil,
              position: integer(),
              id: uuid(),
              inserted_at: NaiveDateTime.t(),
              updated_at: NaiveDateTime.t(),
              status: default__song_status(),
              duration: duration()
            }
    end

    defstruct [:id, :username, :profile_tagline, :avatar_url, :external_homepage_url, :ss]

    @type t() :: %__MODULE__{
            id: uuid(),
            username: String.t(),
            profile_tagline: String.t() | nil,
            avatar_url: String.t() | nil,
            external_homepage_url: String.t() | nil,
            ss: list(Ss.t())
          }
  end

  @type keyword_args() :: [{:limit, integer()}]

  @type map_args() :: %{
          limit: integer()
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, Result.t()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: Result.t()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    with {:ok, results} <- EdgeDB.query(client, @query, args, opts) do
      case result do
        [] ->
          nil

        _ ->
          Enum.map(results, fn result ->
            shape = %Result{
              username: result["username"],
              profile_tagline: result["profile_tagline"],
              id: result["id"],
              external_homepage_url: result["external_homepage_url"],
              avatar_url: result["avatar_url"],
              ss: %Result.Ss{
                updated_at: result["ss"]["updated_at"],
                title: result["ss"]["title"],
                status: result["ss"]["status"],
                server_ip: result["ss"]["server_ip"],
                position: result["ss"]["position"],
                played_at: result["ss"]["played_at"],
                paused_at: result["ss"]["paused_at"],
                inserted_at: result["ss"]["inserted_at"],
                id: result["ss"]["id"],
                duration: result["ss"]["duration"],
                date_released: result["ss"]["date_released"],
                date_recorded: result["ss"]["date_recorded"],
                attribution: result["ss"]["attribution"],
                artist: result["ss"]["artist"]
              }
            }

            {:ok, shape}
          end)
      end
    end
  end
end
